names(endo)
names(OE.weights)
OE.weights$WV$weights
names(OE.weights$WV$weights)
names(WV.weights$weights)
#Create unit for weather variables (as own endogenous): WV (weather variables)
endo[['WV']] = dfd[, c('dbtf','rh')]
WV.weights<-list()
WV.weights$weights<-rep(1/(nvars-2), (nvars-2) ) # weights are 1/N, where N is number of buildings/units
names(WV.weights$weights) <- names(dfd)[1:27]
WV.weights$variables <- c(colnames(endo$WV),"egy") # first entry, endog. variables, second entry weighted average of y from the other countries to proxy demand
WV.weights$exo<-c("dbtf","rh")
OE.weights <- list(WV=WV.weights)
names(WV.weights$weights)
names(endo)
#Create unit for weather variables (as own endogenous): WV (weather variables)
endo[['WV']] = dfd[, c('dbtf','rh')]
WV.weights<-list()
WV.weights$weights<-rep(1/(nvars-2), (nvars-2) ) # weights are 1/N, where N is number of buildings/units
names(WV.weights$weights) <- names(endo)[1:27]
WV.weights$variables <- c(colnames(endo$WV),"egy") # first entry, endog. variables, second entry weighted average of y from the other countries to proxy demand
WV.weights$exo<-c("dbtf","rh")
OE.weights <- list(WV=WV.weights)
names(OE.weights$WV$weights)
model <- bgvar(Data=endo,
W=bW,
plag=7,
saves=100,
burns=100,
prior="SSVS",
SV=TRUE,
h=292, #40% held out
thin=1,
hyperpara=NULL, #Hyperparm.ssvs,
variable.list=NULL,
OE.weights=OE.weights,
trend=FALSE,
save.country.store=FALSE
)
data("monthlyData")
dim(monthlyData)
monthlyData$BG
dim(monthlyData$BG)
endo
head(endo)
head(endo$B10)
tail(endo$B10)
model <- bgvar(Data=endo,
W=bW,
plag=7,
saves=100,
burns=100,
prior="SSVS",
SV=TRUE,
h=292, #40% held out
thin=1,
hyperpara=NULL, #Hyperparm.ssvs,
variable.list=NULL,
OE.weights=OE.weights,
trend=FALSE,
save.country.store=FALSE
)
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/bgvar-model.r')
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/bgvar-model.r')
#setwd('Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability')
library(vars)
library(ggplot2)
library(zoo)
?VAR
data(Canada)
head(Canada)
df = read.csv('Data/tidy/resampled_data_day.csv', row.names = 1 )
names(df) <- gsub(x = names(df), pattern = "Building.", replacement = "B")
names(df)
dfsub <- subset(df, select = -c(B3, B15, B20, B25, B26, B27, B28)) #remove buildings with too many zeros
mean(dfsub$B10)
mean(dfsub$B27)
dfsub <- subset(df, select = c(B1, B4, B5, B6, B7, dbtf, rh)) #remove buildings with too many zeros
names(dfsub)
#Remove negative energy values (spurious)
for (b in names(dfsub)[1:27]) {
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
#Remove negative energy values (spurious)
for (b in names(dfsub)[1:7]) {
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
mean(dfsub$B27)
dfsub <- na.locf(dfsub)
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars-2)])) # do not count time
dfd
head(dfd)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
head(dfd)
model <- VAR(dfd[,1:5], p=3, type = "const", exogen=as.matrix(dfd[,6:7]), ic="AIC")
model.K
model$K
model$p
model$obs
model$datamat
plot(model)
model <- VAR(dfd[,1:5], p=7, type = "const", exogen=as.matrix(dfd[,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:400,1:5], p=7, type = "const", exogen=as.matrix(dfd[1:400,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=9, type = "const", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=10, type = "const", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=10, type = "both", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=10, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=14, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
library(smooth)
install.packages('smooth')
rollmean(dfsub, k=5)
dfsub <- subset(df, select = c(B1, B4, B5, B6, B7, dbtf, rh)) #remove buildings with too many zeros
names(dfsub)
#Remove negative energy values (spurious)
for (b in names(dfsub)[1:7]) {
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
dfsub <- na.locf(dfsub)
dfsub <-rollmean(dfsub, k=5)
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:200,1:5], p=7, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
dfsub <- subset(df, select = c(B1, B4, B5, B6, B7, dbtf, rh)) #remove buildings with too many zeros
names(dfsub)
for (b in names(dfsub)[1:7]) { #Remove negative energy values (spurious)
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
dfsub <- na.locf(dfsub)
dfsub <-rollmean(dfsub, k=7)
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:200,1:5], p=7, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=3, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
model <- VAR(dfd[1:200,1:5], p=7, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
plot(model)
summary(model)
model <- VAR(dfd[1:200,1:5], p=3, type = "none", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:200,1:5], p=3, type = "const", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:200,1:5], p=10, type = "const", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:200,1:5], p=7, type = "const", exogen=as.matrix(dfd[1:200,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:300,1:5], p=7, type = "const", exogen=as.matrix(dfd[1:300,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:300,1:5], p=10, type = "const", exogen=as.matrix(dfd[1:300,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:300,1:5], p=14, type = "const", exogen=as.matrix(dfd[1:300,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:360,1:5], p=14, type = "const", exogen=as.matrix(dfd[1:360,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:5], p=14, type = "const", exogen=as.matrix(dfd[1:365,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:5], p=12, type = "const", exogen=as.matrix(dfd[1:365,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:5], p=15, type = "const", exogen=as.matrix(dfd[1:365,6:7]), ic="AIC")
summary(model)
for (b in names(dfsub)[1:7]) { #Remove negative energy values (spurious)
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
dfsub <- na.locf(dfsub)
dfsub <-rollmean(dfsub, k=7)
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:5], p=15, type = "const", exogen=as.matrix(dfd[1:365,6:7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
names(dfsub)
names(dfd)
dim(dfd)
df$B8
dfsub <- subset(df, select = c(B1, B4, B5, B6, B7, B8, dbtf, rh)) #remove buildings with too many zeros
dfsub <- subset(df, select = c(B1, B4, B5, B6, B7, B8, dbtf, rh)) #remove buildings with too many zeros
names(dfsub)
for (b in names(dfsub)[1:8]) { #Remove negative energy values (spurious)
dfsub[,b] <- replace(dfsub[,b], which(dfsub[,b] < 0), NA)
}
dfsub <- na.locf(dfsub)
dfsub <-rollmean(dfsub, k=7)
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
plot(model)
names(df)
predict(model, 30)
predict(model, n.ahead=30, dumvar = as.matrix(dfd[366:396,7:8]))
predict(model, n.ahead=30, dumvar = as.matrix(dfd[366:395,7:8]))
fcast30 <- predict(model, n.ahead=30, dumvar = as.matrix(dfd[366:395,7:8]))
fcast30$fcst
fcast30$fcst$B1
fcast30$fcst$B1$fcst
fcast30$fcst$B1
fcast30$fcst$B1[['fcst']]
fcast30$fcst$B1[,'fcst']
plot(fcast30$fcst$B1[,'fcst'], dfd[366:395,'B1'])
plot(fcast30$fcst$B8[,'fcst'], dfd[366:395,'B8'])
dfd[366:395,'B8']
dfd[366:395,'B7']
dfd[366:395,'B6']
dfd[366:395,'B5']
dfd[366:395,'B4']
dfd[366:395,'B3']
df[366:395,'B3']
df[366:395,'B9']
df[366:395,'B1']
df[366:395,'B2']
df[366:395,'B10']
df[366:395,'B1']
df[366:395,'B11']
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
df[366:395,'B12']
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B4, B5, B6, B9, B10, B11, B12, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:7], p=15, type = "const", exogen=as.matrix(dfd[1:365,8:9]), ic="AIC")
summary(model)
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:400,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:400,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:400,1:6], p=15, type = "none", exogen=as.matrix(dfd[1:400,7:8]), ic="AIC")
summary(model)
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B1, B4, B5, B6, B7, B8, dbtf, rh))# c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:400,1:6], p=15, type = "none", exogen=as.matrix(dfd[1:400,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:400,1:6], p=1, type = "none", exogen=as.matrix(dfd[1:400,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=15, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=16, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=10, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=10, type = "none", exogen=as.matrix(dfd[1:365,7]), ic="AIC")
summary(model)
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B7, B8, B9, B10, dbtf, rh))# c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:4], p=10, type = "none", exogen=as.matrix(dfd[1:365,5]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=8, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B1, B4, B5, B6, B7, B8, dbtf, rh))# c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
dfsub <- prep_data()
#Difference energy/weather for stationarity
nvars <- ncol(dfsub)
dfd <- diff(as.matrix(dfsub[ , 1:(nvars)])) # do not count time
model <- VAR(dfd[1:365,1:6], p=8, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=7, type = "none", exogen=as.matrix(dfd[1:365,7:8]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=15, type = "const", exogen=as.matrix(dfd[1:365,7]), ic="AIC")
summary(model)
model <- VAR(dfd[1:365,1:6], p=16, type = "const", exogen=as.matrix(dfd[1:365,7]), ic="AIC")
summary(model)
exovars = as.matrix(dfd[1:365,7])
colnames(exovars) = 'dbtf'
model <- VAR(dfd[1:365,1:6], p=16, type = "const", exogen=exovars, ic="AIC")
summary(model)
exovars = as.matrix(dfd[1:300,7])
colnames(exovars) = 'dbtf'
model <- VAR(dfd[1:300,1:6], p=16, type = "const", exogen=exovars, ic="AIC")
summary(model)
fcast30 <- predict(model, n.ahead=30, dumvar = as.matrix(dfd[301:330,7:8]))
fcast30 <- predict(model, n.ahead=30, dumvar = as.matrix(dfd[301:330,7]))
plot(fcast30$fcst$B8[,'fcst'], dfd[366:395,'B8'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
plot(fcast30$fcst$B6[,'fcst'], dfd[301:330,'B6'])
plot(fcast30$fcst$B5[,'fcst'], dfd[301:330,'B5'])
plot(fcast30$fcst$B4[,'fcst'], dfd[301:330,'B4'])
plot(fcast30$fcst$B1[,'fcst'], dfd[301:330,'B1'])
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(model)
summary(model)
plot(fcast30$fcst$B4[,'fcst'], dfd[301:330,'B4'])
plot(fcast30$fcst$B1[,'fcst'], dfd[301:330,'B1'])
plot(fcast30$fcst$B5[,'fcst'], dfd[301:330,'B5'])
plot(fcast30$fcst$B6[,'fcst'], dfd[301:330,'B6'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B6[,'fcst'], dfd[301:330,'B6'])
plot(fcast30$fcst$B5[,'fcst'], dfd[301:330,'B5'])
plot(fcast30$fcst$B4[,'fcst'], dfd[301:330,'B4'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/bgvar-model.r')
prep_data <- function(smoothing_window=7) {
prepped <- subset(df, select = c(B4, B5, B6, B7, B8, B9, B10, B11, dbtf, rh))# c(B4, B5, B6, B9, B10, B11, dbtf, rh)) #remove buildings with too many zerosc(B1, B4, B5, B6, B7, B8, dbtf, rh)
names(dfsub)
for (b in names(prepped)[1:(length(names(prepped)))]) { #Remove negative energy values (spurious)
prepped[,b] <- replace(prepped[,b], which(prepped[,b] < 0), NA)
}
prepped <- na.locf(prepped)
prepped <-rollmean(prepped, k=smoothing_window)
return(prepped)
}
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
summary(model)
plot(model)
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(model)
plot(fcast30$fcst$B7[,'fcst'], dfd[301:330,'B7'])
plot(fcast30$fcst$B8[,'fcst'], dfd[301:330,'B8'])
plot(fcast30$fcst$B9[,'fcst'], dfd[301:330,'B9'])
plot(fcast30$fcst$B10[,'fcst'], dfd[301:330,'B10'])
plot(fcast30$fcst$B11[,'fcst'], dfd[301:330,'B11'])
model$p
model$varresult
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(fcast30$fcst$B11[,'fcst'], dfd[301:330,'B11'])
summary(model)
model <- VAR(dfd[1:500,1:16], p=7, type = "const", exogen=exovars, ic="AIC")
model <- VAR(dfd[1:500,1:8], p=16, type = "const", exogen=exovars, ic="AIC")
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
plot(model)
plot(fcast30$fcst$B10[,'fcst'], dfd[301:330,'B10'])
plot(fcast30$fcst$B11[,'fcst'], dfd[301:330,'B11'])
plot(fcast30$fcst$B9[,'fcst'], dfd[301:330,'B9'])
summary(model)
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
getwd()
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
setwd('/home/jbo/Projects/covid-analysis/')
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
getwd()
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
getwd()
setwd('/home/jbo/Projects/covid-analysis/bin/rscripts/')
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
setwd('/home/jbo/Projects/covid-analysis/bin')
source('~/Projects/covid-analysis/bin/rscripts/clustering.r')
plotD(results,num_clust,"Ward.D2",row.names(d))
plotD(results,num_clust,"Ward.D2",row.names(d))
plotD <- function (clusfit,kk,meth,labels)
{
nodeP <- list(lab.cex = 0.8, pch = c(NA, NA), cex = 1.5,font=1)
dend <- as.dendrogram(clusfit)
#dend <- reorder(dend, 1:13, mean)
labels(dend) <- as.character(labels[clusfit$order])
dend <- set(dend, "labels_cex", .65)
#dend <- set(dend, "hang_leaves", 1)
d1=color_branches(dend,k=kk,col = colors) # brewer.pal(kk,"Paired"))
dcol <- get_leaves_branches_col(d1)
#d1 <- color_labels(d1,k=kk,col=colors) #brewer.pal(kk,"Paired"))
png(file=paste0("../results/Dendrogram-",kk,"-clusters-","-Method-",meth,".png"),family="CM Sans", width=2400,height=2000, res=240) #5300 #2600
plot(d1)
#colored_bars(dcol, dend, rowLabels = c("13 Typologies"))
#dev.off()
}
plotD(results,num_clust,"Ward.D2",row.names(d))
plotD <- function (clusfit,kk,meth,labels)
{
nodeP <- list(lab.cex = 0.8, pch = c(NA, NA), cex = 1.5,font=1)
dend <- as.dendrogram(clusfit)
#dend <- reorder(dend, 1:13, mean)
labels(dend) <- as.character(labels[clusfit$order])
dend <- set(dend, "labels_cex", .65)
#dend <- set(dend, "hang_leaves", 1)
d1=color_branches(dend,k=kk,col = colors) # brewer.pal(kk,"Paired"))
dcol <- get_leaves_branches_col(d1)
d1 <- color_labels(d1,k=kk,col=colors) #brewer.pal(kk,"Paired"))
#png(file=paste0("../results/Dendrogram-",kk,"-clusters-","-Method-",meth,".png"),family="CM Sans", width=2400,height=2000, res=240) #5300 #2600
plot(d1)
#colored_bars(dcol, dend, rowLabels = c("13 Typologies"))
#dev.off()
}
plotD(results,num_clust,"Ward.D2",row.names(d))
plotD <- function (clusfit,kk,meth,labels)
{
nodeP <- list(lab.cex = 0.8, pch = c(NA, NA), cex = 1.5,font=1)
dend <- as.dendrogram(clusfit)
#dend <- reorder(dend, 1:13, mean)
labels(dend) <- as.character(labels[clusfit$order])
dend <- set(dend, "labels_cex", .65)
#dend <- set(dend, "hang_leaves", 1)
d1=color_branches(dend,k=kk,col = colors) # brewer.pal(kk,"Paired"))
dcol <- get_leaves_branches_col(d1)
d1 <- color_labels(d1,k=kk,col=colors) #brewer.pal(kk,"Paired"))
#png(file=paste0("../results/Dendrogram-",kk,"-clusters-","-Method-",meth,".png"),family="CM Sans", width=2400,height=2000, res=240) #5300 #2600
plot(d1)
#colored_bars(dcol, dend, rowLabels = c("13 Typologies"))
#dev.off()
}
?hclust
?NbClust
install.packages("NbClust")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=d, method="ward.D2",min.nc=7,index="all")
library(NbClust)
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=d, method="ward.D2",min.nc=7,index="all")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.dist(d), method="ward.D2",min.nc=7,index="all")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.dist(d), method="ward.D2",min.nc=7) #,index="all")
head(d)
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.matrix(d), method="ward.D2",min.nc=7) #,index="all")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.matrix(d), distance=NULL,method="ward.D2",min.nc=7) #,index="all")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.dist(d), distance=NULL,method="ward.D2",min.nc=7) #,index="all")
as.dist(d)
as.dist(transpose(d))
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.dist(transpose(d)), distance=NULL,method="ward.D2",min.nc=7) #,index="all")
#optClustWardScaled9 <- NbClust(as.data.frame(scaled.f9scores),distance="manhattan", method="ward.D2",min.nc=10,max.nc=15,index="gap")
fitness_metrics <- NbClust(diss=as.matrix(transpose(d)), distance=NULL,method="ward.D2",min.nc=7) #,index="all")
plotD(results,num_clust,"Ward.D2",row.names(d))
plot(results)
results
results$labels
